{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Convolutional Neural Networks (CNN)\n<font color='blue'>\n<br>Content: \n* [Loading the Data Set](#1)\n* [Normalization, Reshape and Label Encoding ](#2)\n* [Train Test Split](#3)\n* [Convolutional Neural Network](#4)\n    * [What is Convolution Operation?](#5)\n    * [Same Padding](#6)\n    * [Max Pooling](#7)\n    * [Flattening](#8)\n    * [Full Connection](#9)\n* [Implementing with Keras](#10)\n    * [Create Model](#11)\n    * [Define Optimizer](#12)\n    * [Compile Model](#13)\n    * [Epochs and Batch Size](#14)\n    * [Data Augmentation](#15)\n    * [Fit the Model](#16)\n    * [Evaluate the Model](#17)\n* [Deep Learning Tutorial for Beginners](https://www.kaggle.com/kanncaa1/deep-learning-tutorial-for-beginners)\n* [Artificial Neural Network with Pytorch](https://www.kaggle.com/kanncaa1/pytorch-tutorial-for-deep-learning-lovers)\n* [Convolutional Neural Network with Pytorch](https://www.kaggle.com/kanncaa1/pytorch-tutorial-for-deep-learning-lovers)\n* [Recurrent Neural Network with Pytorch](https://www.kaggle.com/kanncaa1/recurrent-neural-network-with-pytorch)\n* [Conclusion](#18)\n","metadata":{"_uuid":"8c80a83f7fb1ab87aabbdad97d11627fb0380e8f"}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom keras.datasets import mnist\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"../input\"))\n\n# Any results you write to the current directory are saved as output.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2021-07-15T18:39:24.599801Z","iopub.execute_input":"2021-07-15T18:39:24.600143Z","iopub.status.idle":"2021-07-15T18:39:24.611053Z","shell.execute_reply.started":"2021-07-15T18:39:24.600097Z","shell.execute_reply":"2021-07-15T18:39:24.610206Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"['sample_submission.csv', 'train.csv', 'test.csv']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"<a id=\"1\"></a>\n## Loading the Data Set\n* In this part we load and visualize the data.","metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a"}},{"cell_type":"code","source":"# read train \ntrain = pd.read_csv(\"../input/train.csv\")\nprint(train.shape)\ntrain.head()","metadata":{"_uuid":"6884db4361a209f639cd6f3bf15231d271ecf563","execution":{"iopub.status.busy":"2021-07-15T18:39:24.612328Z","iopub.execute_input":"2021-07-15T18:39:24.612653Z","iopub.status.idle":"2021-07-15T18:39:30.250896Z","shell.execute_reply.started":"2021-07-15T18:39:24.612592Z","shell.execute_reply":"2021-07-15T18:39:30.249744Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"(42000, 785)\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"   label  pixel0  pixel1    ...     pixel781  pixel782  pixel783\n0      1       0       0    ...            0         0         0\n1      0       0       0    ...            0         0         0\n2      1       0       0    ...            0         0         0\n3      4       0       0    ...            0         0         0\n4      0       0       0    ...            0         0         0\n\n[5 rows x 785 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>pixel9</th>\n      <th>pixel10</th>\n      <th>pixel11</th>\n      <th>pixel12</th>\n      <th>pixel13</th>\n      <th>pixel14</th>\n      <th>pixel15</th>\n      <th>pixel16</th>\n      <th>pixel17</th>\n      <th>pixel18</th>\n      <th>pixel19</th>\n      <th>pixel20</th>\n      <th>pixel21</th>\n      <th>pixel22</th>\n      <th>pixel23</th>\n      <th>pixel24</th>\n      <th>pixel25</th>\n      <th>pixel26</th>\n      <th>pixel27</th>\n      <th>pixel28</th>\n      <th>pixel29</th>\n      <th>pixel30</th>\n      <th>pixel31</th>\n      <th>pixel32</th>\n      <th>pixel33</th>\n      <th>pixel34</th>\n      <th>pixel35</th>\n      <th>pixel36</th>\n      <th>pixel37</th>\n      <th>pixel38</th>\n      <th>...</th>\n      <th>pixel744</th>\n      <th>pixel745</th>\n      <th>pixel746</th>\n      <th>pixel747</th>\n      <th>pixel748</th>\n      <th>pixel749</th>\n      <th>pixel750</th>\n      <th>pixel751</th>\n      <th>pixel752</th>\n      <th>pixel753</th>\n      <th>pixel754</th>\n      <th>pixel755</th>\n      <th>pixel756</th>\n      <th>pixel757</th>\n      <th>pixel758</th>\n      <th>pixel759</th>\n      <th>pixel760</th>\n      <th>pixel761</th>\n      <th>pixel762</th>\n      <th>pixel763</th>\n      <th>pixel764</th>\n      <th>pixel765</th>\n      <th>pixel766</th>\n      <th>pixel767</th>\n      <th>pixel768</th>\n      <th>pixel769</th>\n      <th>pixel770</th>\n      <th>pixel771</th>\n      <th>pixel772</th>\n      <th>pixel773</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# read test \ntest= pd.read_csv(\"../input/test.csv\")\nprint(test.shape)\ntest.head()","metadata":{"_uuid":"d7ab3a0db0c87aef2bb65fae5f564ff4b1260a96","execution":{"iopub.status.busy":"2021-07-15T18:39:30.252507Z","iopub.execute_input":"2021-07-15T18:39:30.252896Z","iopub.status.idle":"2021-07-15T18:39:33.720508Z","shell.execute_reply.started":"2021-07-15T18:39:30.252826Z","shell.execute_reply":"2021-07-15T18:39:33.719497Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"(28000, 784)\n","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   pixel0  pixel1  pixel2    ...     pixel781  pixel782  pixel783\n0       0       0       0    ...            0         0         0\n1       0       0       0    ...            0         0         0\n2       0       0       0    ...            0         0         0\n3       0       0       0    ...            0         0         0\n4       0       0       0    ...            0         0         0\n\n[5 rows x 784 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>pixel9</th>\n      <th>pixel10</th>\n      <th>pixel11</th>\n      <th>pixel12</th>\n      <th>pixel13</th>\n      <th>pixel14</th>\n      <th>pixel15</th>\n      <th>pixel16</th>\n      <th>pixel17</th>\n      <th>pixel18</th>\n      <th>pixel19</th>\n      <th>pixel20</th>\n      <th>pixel21</th>\n      <th>pixel22</th>\n      <th>pixel23</th>\n      <th>pixel24</th>\n      <th>pixel25</th>\n      <th>pixel26</th>\n      <th>pixel27</th>\n      <th>pixel28</th>\n      <th>pixel29</th>\n      <th>pixel30</th>\n      <th>pixel31</th>\n      <th>pixel32</th>\n      <th>pixel33</th>\n      <th>pixel34</th>\n      <th>pixel35</th>\n      <th>pixel36</th>\n      <th>pixel37</th>\n      <th>pixel38</th>\n      <th>pixel39</th>\n      <th>...</th>\n      <th>pixel744</th>\n      <th>pixel745</th>\n      <th>pixel746</th>\n      <th>pixel747</th>\n      <th>pixel748</th>\n      <th>pixel749</th>\n      <th>pixel750</th>\n      <th>pixel751</th>\n      <th>pixel752</th>\n      <th>pixel753</th>\n      <th>pixel754</th>\n      <th>pixel755</th>\n      <th>pixel756</th>\n      <th>pixel757</th>\n      <th>pixel758</th>\n      <th>pixel759</th>\n      <th>pixel760</th>\n      <th>pixel761</th>\n      <th>pixel762</th>\n      <th>pixel763</th>\n      <th>pixel764</th>\n      <th>pixel765</th>\n      <th>pixel766</th>\n      <th>pixel767</th>\n      <th>pixel768</th>\n      <th>pixel769</th>\n      <th>pixel770</th>\n      <th>pixel771</th>\n      <th>pixel772</th>\n      <th>pixel773</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# put labels into y_train variable\nY_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) ","metadata":{"_uuid":"318d94f6e935a6d8210d0ac03707dfa6e3946475","execution":{"iopub.status.busy":"2021-07-15T18:39:33.721748Z","iopub.execute_input":"2021-07-15T18:39:33.722022Z","iopub.status.idle":"2021-07-15T18:39:33.950447Z","shell.execute_reply.started":"2021-07-15T18:39:33.721971Z","shell.execute_reply":"2021-07-15T18:39:33.949457Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# visualize number of digits classes\nplt.figure(figsize=(15,7))\ng = sns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts()","metadata":{"_uuid":"8902b0312e6c047596cf27ebba554a68b82604b2","execution":{"iopub.status.busy":"2021-07-15T18:39:33.952007Z","iopub.execute_input":"2021-07-15T18:39:33.952252Z","iopub.status.idle":"2021-07-15T18:39:34.291515Z","shell.execute_reply.started":"2021-07-15T18:39:33.952212Z","shell.execute_reply":"2021-07-15T18:39:34.290694Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"1    4684\n7    4401\n3    4351\n9    4188\n2    4177\n6    4137\n0    4132\n4    4072\n8    4063\n5    3795\nName: label, dtype: int64"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x504 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"# plot some samples\nimg = X_train.iloc[0].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[0,0])\nplt.axis(\"off\")\nplt.show()","metadata":{"_uuid":"4c9d3a1467cf82a3dff04967a9846906f9758ed4","execution":{"iopub.status.busy":"2021-07-15T18:39:34.293103Z","iopub.execute_input":"2021-07-15T18:39:34.293741Z","iopub.status.idle":"2021-07-15T18:39:34.400259Z","shell.execute_reply.started":"2021-07-15T18:39:34.293679Z","shell.execute_reply":"2021-07-15T18:39:34.399375Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAP8AAAEICAYAAACQ6CLfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvIxREBQAABkdJREFUeJzt3b2LVFccx+Fz3EWSxrUQLYyFiJWCIEEQsRCFlCpWakTsLNIKARWbWNjb2WQVVASDb42yYCcisRL8AyxSCmIR19W9KZJO56zZ2ZnZme/zVMJv70vhxyN75s6tXdcVIM+aUd8AMBrih1Dih1Dih1Dih1Dih1Dih1Di5wu11l9qrX/WWudrrb+P+n4YjOlR3wCr0l+llN9KKT+VUr4f8b0wIOLnC13X/VFKKbXWH0spP4z4dhgQ/+2HUOKHUOKHUOKHUH7hxxdqrdPl378bU6WUqVrrd6WUT13XfRrtnbGSrPx8zYVSyt+llF9LKT//9+cLI70jVlz1ZR6QycoPocQPocQPocQPoYa61Vdr9dtFGLCu6+q3/JyVH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0KJH0IN9RXdMExzc3M9ZwcPHmwee/r06eb8+vXry7qn1cTKD6HED6HED6HED6HED6HED6HED6Hs8zO2nj592pzv27ev52xxcbF5bNd1y7qncWLlh1Dih1Dih1Dih1Dih1Dih1Dih1D2+Vm1zp8/35zv3bu3OZ+amuo5u3PnTvPYu3fvNueTwMoPocQPocQPocQPocQPocQPoeowH12stU7+c5J8syNHjjTnt27das7Xrl3bnL969arnbP/+/c1j379/35yvZl3X1W/5OSs/hBI/hBI/hBI/hBI/hBI/hBI/hPJILwO1ZcuWnrNLly41j11qH//t27fN+cWLF3vOxnkff6VY+SGU+CGU+CGU+CGU+CGU+CGU+CGU5/npy549e5rza9eu9Zzt3Lmzr2ufPHmyOb99+3Zf5x9XnucHmsQPocQPocQPocQPocQPocQPoTzPT9OpU6ea89nZ2ea89TmSd+/eNY+dm5trzh8/ftyc02blh1Dih1Dih1Dih1Dih1Dih1Dih1D2+cNt2rSpOT937tzArn3//v3m/MyZMwO7NlZ+iCV+CCV+CCV+CCV+CCV+CGWrb8KtX7++OX/y5ElzvmPHjr6u33oV9oMHD/o6N/2x8kMo8UMo8UMo8UMo8UMo8UMo8UMor+iecJs3b27O37x509f5a22/DXpmZqbnrPUZAJbPK7qBJvFDKPFDKPFDKPFDKPFDKPFDKM/zT4ANGzb0nD18+LB57FL79Et5/vx5c/7x48e+zs/gWPkhlPghlPghlPghlPghlPghlPghlH3+CXD16tWes127djWPXer7HJ49e9acHzp0qDmfn59vzhkdKz+EEj+EEj+EEj+EEj+EEj+EEj+Ess8/BlrP65dSyrZt25Z97oWFheb8ypUrzbl9/PFl5YdQ4odQ4odQ4odQ4odQ4odQtvpWgY0bNzbnN2/ebM53797dc/bhw4fmsWfPnm3OHz161Jwzvqz8EEr8EEr8EEr8EEr8EEr8EEr8EMo+/ypw9OjR5vzAgQPLPveLFy+a8xs3biz73Iw3Kz+EEj+EEj+EEj+EEj+EEj+EEj+Ess8/BMePH2/Ol/p67KW0XqN94sSJvs7N5LLyQyjxQyjxQyjxQyjxQyjxQyjxQ6jadd3wLlbr8C42RDMzM835y5cvm/OtW7f2df1jx471nN27d6+vczN+uq6r3/JzVn4IJX4IJX4IJX4IJX4IJX4I5ZHeFXD48OHmvN+tvKWsW7duoOdnMln5IZT4IZT4IZT4IZT4IZT4IZT4IZR9/hWwsLDQnC8uLjbna9a0/w3+/Plzc759+/bmHL7Gyg+hxA+hxA+hxA+hxA+hxA+hxA+hfHX3ELx+/bo5n55uf9zi8uXLzfns7Oz/vicml6/uBprED6HED6HED6HED6HED6HED6Hs88OEsc8PNIkfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQokfQg31Fd3A6mHlh1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1Dih1D/APa+3jaVsRCVAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":"# plot some samples\nimg = X_train.iloc[3].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","metadata":{"_uuid":"d6b119ecbe774a45656d1d157f9b33f38adf8e96","execution":{"iopub.status.busy":"2021-07-15T18:39:34.401859Z","iopub.execute_input":"2021-07-15T18:39:34.402448Z","iopub.status.idle":"2021-07-15T18:39:34.525259Z","shell.execute_reply.started":"2021-07-15T18:39:34.402388Z","shell.execute_reply":"2021-07-15T18:39:34.524351Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id=\"2\"></a>\n## Normalization, Reshape and Label Encoding \n* Normalization\n    * We perform a grayscale normalization to reduce the effect of illumination's differences.\n    * If we perform normalization, CNN works faster.\n* Reshape\n    * Train and test images (28 x 28) \n    * We reshape all data to 28x28x1 3D matrices.\n    * Keras needs an extra dimension in the end which correspond to channels. Our images are gray scaled so it use only one channel. \n* Label Encoding  \n    * Encode labels to one hot vectors \n        * 2 => [0,0,1,0,0,0,0,0,0,0]\n        * 4 => [0,0,0,0,1,0,0,0,0,0]","metadata":{"_uuid":"74e341f4845b42101182eda3c990e3dc4dc64dff"}},{"cell_type":"code","source":"# Normalize the data\nX_train = X_train / 255.0\ntest = test / 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","metadata":{"_uuid":"f39e537f15757b5da3363c138a33e50bd78bbf49","execution":{"iopub.status.busy":"2021-07-15T18:39:34.526953Z","iopub.execute_input":"2021-07-15T18:39:34.527546Z","iopub.status.idle":"2021-07-15T18:39:35.249297Z","shell.execute_reply.started":"2021-07-15T18:39:34.527484Z","shell.execute_reply":"2021-07-15T18:39:35.248167Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"x_train shape:  (42000, 784)\ntest shape:  (28000, 784)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Reshape\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","metadata":{"_uuid":"d524f6de086928158a76c54d1685a92c1802e230","execution":{"iopub.status.busy":"2021-07-15T18:39:35.251365Z","iopub.execute_input":"2021-07-15T18:39:35.251783Z","iopub.status.idle":"2021-07-15T18:39:35.257820Z","shell.execute_reply.started":"2021-07-15T18:39:35.251737Z","shell.execute_reply":"2021-07-15T18:39:35.256891Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"x_train shape:  (42000, 28, 28, 1)\ntest shape:  (28000, 28, 28, 1)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Label Encoding \nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nY_train = to_categorical(Y_train, num_classes = 10)","metadata":{"_uuid":"d15d35ca439dce194a96f4442c7a1c085ce24d28","execution":{"iopub.status.busy":"2021-07-15T18:39:35.259358Z","iopub.execute_input":"2021-07-15T18:39:35.259779Z","iopub.status.idle":"2021-07-15T18:39:35.273896Z","shell.execute_reply.started":"2021-07-15T18:39:35.259737Z","shell.execute_reply":"2021-07-15T18:39:35.273158Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"3\"></a>\n## Train Test Split\n* We split the data into train and test sets.\n* test size is 10%.\n* train size is 90%.","metadata":{"_uuid":"111d4a1e66d823363f890f892bba39d692479663"}},{"cell_type":"code","source":"# Split the train and the validation set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","metadata":{"_uuid":"882d9dfb1bee94b2ec1e83911e3e334994d74f4b","execution":{"iopub.status.busy":"2021-07-15T18:39:35.275115Z","iopub.execute_input":"2021-07-15T18:39:35.275666Z","iopub.status.idle":"2021-07-15T18:39:36.182945Z","shell.execute_reply.started":"2021-07-15T18:39:35.275619Z","shell.execute_reply":"2021-07-15T18:39:36.181929Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"x_train shape (37800, 28, 28, 1)\nx_test shape (4200, 28, 28, 1)\ny_train shape (37800, 10)\ny_test shape (4200, 10)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Some examples\nplt.imshow(X_train[2][:,:,0],cmap='gray')\nplt.show()","metadata":{"_uuid":"1cdc57350e1c251ec583093ebba18c51a537f55f","execution":{"iopub.status.busy":"2021-07-15T18:39:36.184165Z","iopub.execute_input":"2021-07-15T18:39:36.184603Z","iopub.status.idle":"2021-07-15T18:39:36.297927Z","shell.execute_reply.started":"2021-07-15T18:39:36.184379Z","shell.execute_reply":"2021-07-15T18:39:36.297156Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id=\"4\"></a>\n## Convolutional Neural Network \n* CNN is used for image classification, object detection \n* <a href=\"https://ibb.co/kV1j9p\"><img src=\"https://preview.ibb.co/nRkBpp/gec2.jpg\" alt=\"gec2\" border=\"0\"></a>","metadata":{"_uuid":"caf4b9f7fcae153ac1d4c0246b1defc9d9d30776"}},{"cell_type":"markdown","source":"<a id=\"5\"></a>\n### What is Convolution Operation?\n* We have some image and feature detector(3*3)\n* Feature detector does not need to be 3 by 3 matrix. It can be 5 by 5 or 7 by 7.\n* Feature detector = kernel = filter\n* Feauture detector detects features like edges or convex shapes. Example, if out input is dog, feature detector can detect features like ear or tail of the dog.\n* feature map = conv(input image, feature detector). Element wise multiplication of matrices.\n* feature map = convolved feature\n* Stride = navigating in input image.\n* We reduce the size of image. This is important bc code runs faster. However, we lost information. \n* We create multiple feature maps bc we use multiple feature detectors(filters).\n* Lets look at gimp. Edge detect: [0,10,0],[10,-4,10],[0,10,0]\n* <a href=\"https://imgbb.com/\"><img src=\"https://image.ibb.co/m4FQC9/gec.jpg\" alt=\"gec\" border=\"0\"></a>\n* After having convolution layer we use ReLU to break up linearity. Increase nonlinearity. Because images are non linear.\n* <a href=\"https://ibb.co/mVZih9\"><img src=\"https://preview.ibb.co/gbcQvU/RELU.jpg\" alt=\"RELU\" border=\"0\"></a>","metadata":{"_uuid":"682cb6f5144794038c0bef1dc0814dde0f7fe6c0"}},{"cell_type":"markdown","source":"<a id=\"6\"></a>\n### Same Padding\n* As we keep applying conv layers, the size of the volume will decrease faster than we would like. In the early layers of our network, we want to preserve as much information about the original input volume so that we can extract those low level features.\n* input size and output size are same.\n* <a href=\"https://ibb.co/jUPkUp\"><img src=\"https://preview.ibb.co/noH5Up/padding.jpg\" alt=\"padding\" border=\"0\"></a>","metadata":{"_uuid":"3af8fb49243719ad70016b64cd4dff6e62c413d9"}},{"cell_type":"markdown","source":"<a id=\"7\"></a>\n### Max Pooling\n* It makes down-sampling or sub-sampling (Reduces the number of parameters)\n* It makes the detection of features invariant to scale or orientation changes.\n* It reduce the amount of parameters and computation in the network, and hence to also control overfitting. \n* <a href=\"https://ibb.co/ckTjN9\"><img src=\"https://preview.ibb.co/gsNYFU/maxpool.jpg\" alt=\"maxpool\" border=\"0\"></a>","metadata":{"_uuid":"6694b8ea366f974d6bd055a2915a5dc06f7a96bb"}},{"cell_type":"markdown","source":"<a id=\"8\"></a>\n### Flattening\n* <a href=\"https://imgbb.com/\"><img src=\"https://image.ibb.co/c7eVvU/flattenigng.jpg\" alt=\"flattenigng\" border=\"0\"></a>","metadata":{"_uuid":"c2fb971fc473c9104a27975242a36f8e9183742c"}},{"cell_type":"markdown","source":"<a id=\"9\"></a>\n### Full Connection\n* Neurons in a fully connected layer have connections to all activations in the previous layer\n* Artificial Neural Network\n* <a href=\"https://ibb.co/hsS14p\"><img src=\"https://preview.ibb.co/evzsAU/fullyc.jpg\" alt=\"fullyc\" border=\"0\"></a>","metadata":{"_uuid":"f437407cf18fdfacf8626baa5e76ed5d64be1a11","trusted":true}},{"cell_type":"markdown","source":"<a id=\"10\"></a>\n## Implementing with Keras","metadata":{"_uuid":"7b290eb3f3b111d6841f8e4093277be1bde05078","trusted":true}},{"cell_type":"markdown","source":"<a id=\"11\"></a>\n### Create Model\n* conv => max pool => dropout => conv => max pool => dropout => fully connected (2 layer)\n* Dropout: Dropout is a technique where randomly selected neurons are ignored during training\n* <a href=\"https://ibb.co/jGcvVU\"><img src=\"https://preview.ibb.co/e7yPPp/dropout.jpg\" alt=\"dropout\" border=\"0\"></a>","metadata":{"_uuid":"fd9feb4c4dadbb8a5cc8a32b5ef582d41b5c0698","trusted":true}},{"cell_type":"code","source":"# \nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","metadata":{"_uuid":"c441d7b3852cee5d3636272d4da2f96b169f81ac","execution":{"iopub.status.busy":"2021-07-15T18:39:36.299418Z","iopub.execute_input":"2021-07-15T18:39:36.300078Z","iopub.status.idle":"2021-07-15T18:39:36.505908Z","shell.execute_reply.started":"2021-07-15T18:39:36.300015Z","shell.execute_reply":"2021-07-15T18:39:36.504741Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"12\"></a>\n### Define Optimizer   \n* Adam optimizer: Change the learning rate\n","metadata":{"_uuid":"9a432df491777ca0019db6f6b972581f2c5bd9f9"}},{"cell_type":"code","source":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","metadata":{"_uuid":"607a02b42636e3115a1ac7a8edcadf61cf5ea1b0","execution":{"iopub.status.busy":"2021-07-15T18:39:36.507182Z","iopub.execute_input":"2021-07-15T18:39:36.507462Z","iopub.status.idle":"2021-07-15T18:39:36.531929Z","shell.execute_reply.started":"2021-07-15T18:39:36.507415Z","shell.execute_reply":"2021-07-15T18:39:36.531063Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"13\"></a>\n### Compile Model\n* categorical crossentropy\n* We make binary cross entropy at previous parts and in machine learning tutorial\n* At this time we use categorical crossentropy. That means that we have multi class.\n* <a href=\"https://ibb.co/jm1bpp\"><img src=\"https://preview.ibb.co/nN3ZaU/cce.jpg\" alt=\"cce\" border=\"0\"></a>\n","metadata":{"_uuid":"91bf542a979c5b191c534876186bf31e70ec7f06"}},{"cell_type":"code","source":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","metadata":{"_uuid":"0d1eefc68470b4cdcec04c2570651da3d97676d0","execution":{"iopub.status.busy":"2021-07-15T18:39:36.533187Z","iopub.execute_input":"2021-07-15T18:39:36.533534Z","iopub.status.idle":"2021-07-15T18:39:36.567502Z","shell.execute_reply.started":"2021-07-15T18:39:36.533470Z","shell.execute_reply":"2021-07-15T18:39:36.566842Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"14\"></a>\n### Epochs and Batch Size\n* Say you have a dataset of 10 examples (or samples). You have a **batch size** of 2, and you've specified you want the algorithm to run for 3 **epochs**. Therefore, in each epoch, you have 5 **batches** (10/2 = 5). Each batch gets passed through the algorithm, therefore you have 5 iterations **per epoch**.\n* reference: https://stackoverflow.com/questions/4752626/epoch-vs-iteration-when-training-neural-networks","metadata":{"_uuid":"d5d8fea4cbb9b53cf1bb5089357a33dc179ee981"}},{"cell_type":"code","source":"epochs = 10  # for better result increase the epochs\nbatch_size = 250","metadata":{"_uuid":"a237feb5e53ecbc8799101cb6e699877faafde77","execution":{"iopub.status.busy":"2021-07-15T18:39:36.568748Z","iopub.execute_input":"2021-07-15T18:39:36.569214Z","iopub.status.idle":"2021-07-15T18:39:36.572547Z","shell.execute_reply.started":"2021-07-15T18:39:36.569170Z","shell.execute_reply":"2021-07-15T18:39:36.571995Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"15\"></a>\n### Data Augmentation\n* To avoid overfitting problem, we need to expand artificially our handwritten digit dataset\n* Alter the training data with small transformations to reproduce the variations of digit.\n* For example, the number is not centered The scale is not the same (some who write with big/small numbers) The image is rotated.\n* <a href=\"https://ibb.co/k24CUp\"><img src=\"https://preview.ibb.co/nMxXUp/augment.jpg\" alt=\"augment\" border=\"0\"></a>\n    \n","metadata":{"_uuid":"e87c60e45759e0c52c2b72ee562fdb964c8008d5"}},{"cell_type":"code","source":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 10%\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","metadata":{"_uuid":"c339fa7d06e9b73a519ca661bed19de482707d1f","execution":{"iopub.status.busy":"2021-07-15T18:39:36.573754Z","iopub.execute_input":"2021-07-15T18:39:36.574212Z","iopub.status.idle":"2021-07-15T18:39:36.780051Z","shell.execute_reply.started":"2021-07-15T18:39:36.574091Z","shell.execute_reply":"2021-07-15T18:39:36.779336Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"16\"></a>\n### Fit the model","metadata":{"_uuid":"e42e43f1b3b9e6da0d99dafff8f4a4b514a07f4c"}},{"cell_type":"code","source":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] // batch_size)","metadata":{"_uuid":"4b2957bb8976a25cdbbbdc3110d68c5035a9773c","execution":{"iopub.status.busy":"2021-07-15T18:39:36.781142Z","iopub.execute_input":"2021-07-15T18:39:36.781557Z","iopub.status.idle":"2021-07-15T18:43:38.797691Z","shell.execute_reply.started":"2021-07-15T18:39:36.781515Z","shell.execute_reply":"2021-07-15T18:43:38.796761Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"Epoch 1/10\n151/151 [==============================] - 25s 164ms/step - loss: 1.0091 - acc: 0.6669 - val_loss: 0.1950 - val_acc: 0.9498\nEpoch 2/10\n151/151 [==============================] - 24s 160ms/step - loss: 0.3925 - acc: 0.8775 - val_loss: 0.1273 - val_acc: 0.9645\nEpoch 3/10\n151/151 [==============================] - 24s 161ms/step - loss: 0.2899 - acc: 0.9082 - val_loss: 0.0926 - val_acc: 0.9729\nEpoch 4/10\n151/151 [==============================] - 24s 160ms/step - loss: 0.2456 - acc: 0.9226 - val_loss: 0.0774 - val_acc: 0.9776\nEpoch 5/10\n151/151 [==============================] - 24s 157ms/step - loss: 0.2170 - acc: 0.9326 - val_loss: 0.0695 - val_acc: 0.9774\nEpoch 6/10\n151/151 [==============================] - 24s 159ms/step - loss: 0.2031 - acc: 0.9370 - val_loss: 0.0612 - val_acc: 0.9819\nEpoch 7/10\n151/151 [==============================] - 24s 160ms/step - loss: 0.1878 - acc: 0.9419 - val_loss: 0.0567 - val_acc: 0.9833\nEpoch 8/10\n151/151 [==============================] - 24s 157ms/step - loss: 0.1715 - acc: 0.9469 - val_loss: 0.0577 - val_acc: 0.9824\nEpoch 9/10\n151/151 [==============================] - 24s 159ms/step - loss: 0.1641 - acc: 0.9495 - val_loss: 0.0523 - val_acc: 0.9836\nEpoch 10/10\n151/151 [==============================] - 24s 160ms/step - loss: 0.1569 - acc: 0.9527 - val_loss: 0.0519 - val_acc: 0.9840\n","output_type":"stream"}]},{"cell_type":"markdown","source":"<a id=\"17\"></a>\n### Evaluate the model\n* Test Loss visualization\n* Confusion matrix\n","metadata":{"_uuid":"debd5424728e11aa30a8513ac7b4f7377193a2da"}},{"cell_type":"code","source":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","metadata":{"_uuid":"180a06f7ae01e69117c6c8258411cfe1b9b7b991","execution":{"iopub.status.busy":"2021-07-15T18:43:38.798997Z","iopub.execute_input":"2021-07-15T18:43:38.799229Z","iopub.status.idle":"2021-07-15T18:43:38.991983Z","shell.execute_reply.started":"2021-07-15T18:43:38.799195Z","shell.execute_reply":"2021-07-15T18:43:38.990922Z"},"trusted":true},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{"_uuid":"6586e37bd470db822086e191a90388e7175d504f","execution":{"iopub.status.busy":"2021-07-15T18:43:38.993786Z","iopub.execute_input":"2021-07-15T18:43:38.994452Z","iopub.status.idle":"2021-07-15T18:43:41.034325Z","shell.execute_reply.started":"2021-07-15T18:43:38.994376Z","shell.execute_reply":"2021-07-15T18:43:41.033240Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 576x576 with 2 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id=\"18\"></a>\n## Conclusion\n* http://scs.ryerson.ca/~aharley/vis/conv/flat.html\n* HW\n* If you have any question I will be very happy to hear it.","metadata":{"_uuid":"9409bc6a7e905d5887c8eec8d056c9f015bf4878"}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}